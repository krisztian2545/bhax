<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Arroway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>OO szemlélet</title>
        <para>
          A módosított polártranszformációs normális generátor beprogramozása Java nyelven. Mutassunk rá,
hogy a mi természetes saját megoldásunk (az algoritmus egyszerre két normálist állít elő, kell egy
példánytag, amely a nem visszaadottat tárolja és egy logikai tag, hogy van-e tárolt vagy futtatni kell
az algot.) és az OpenJDK, Oracle JDK-ban a Sun által adott OO szervezés ua.!
https://arato.inf.unideb.hu/batfai.norbert/UDPROG/deprecated/Prog1_5.pdf (16-22 fólia)
Ugyanezt írjuk meg C++ nyelven is! (lásd még UDPROG repó: source/labor/polargen)
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="arroway/PolárGenerátor.java">
            <filename>bhax/thematic_tutorials/bhax_textbook/arroway/PolárGenerátor.java</filename>
            </link>
        </para>
        <para>
            <link xlink:href="arroway/polargen.cpp">
            <filename>bhax/thematic_tutorials/bhax_textbook/arroway/polargen.cpp</filename>
            </link>
        </para>
        <para>
          Ennek a feladatnak a megoldásához nincs szükségünk a matematikai háttérre, mivel csak egy osztályt kell írnunk, amely képes kezelni a már megtervezett számításokat.
          A feladatunk egyszerű: van egy számítás - amivel igázából nem sokat kell foglalkoznunk, mert csak lemásoljuk az okos emberek által kitalált képleteket - , amihez írnunk kell egy osztályt, amely képes azt kezelni.
        </para>
        <programlisting language="c"><![CDATA[
        boolean nincsTárolt = true;
        double tárolt;

        public double következő() {

            if(nincsTárolt) {

                // számítások
                ...

                tárolt = egyik_eredmény;
                nincsTárolt = !nincsTárolt;

                return másik_eredmény;

            } else {
                nincsTárolt = !nincsTárolt;
                return tárolt;
            }
        }]]>
        </programlisting>
        <para>
          A legfontosabb rész el is készült. Ez az egész egy osztályban lesz, ezért definiáljuk a <function>nincsTárolt</function> és <function>tárolt</function> mezőket, hogy azok a metódusunkon kívül is megtartsák értéküket. A függvényünk első hívásával, mivel még nincs egy tárolt érték se, generálunk 2 értéket és az egyiket eltároljuk, a másikat pedig visszaadjuk. A függvény második hívásakor viszont már nem generálunk semmit, csak visszaadjuk az eltárolt értéket és a <function>nincsTárolt</function> változót újra hamisra állítjuk.
        </para>
        <para>
          A <function>main</function> függvényben az osztály példányosítása után a tesztelés és demonstráció kedvéért meghívjuk 10-szer a metódusunkat, ami ugyebár csak 5-ször (minden második ciklusban, kezdve az elsőtől) fog számításokat végezni és szintén 5-ször visszaadja az eltárolt eredményeket.
        </para>
        <programlisting language="c"><![CDATA[public static void main(String[] args) {

            PolárGenerátor g = new PolárGenerátor();

            for(int i=0; i<10; ++i)
                System.out.println(g.következő());

        }]]>
        </programlisting>
        <para>
          A teljes java forráskódot megleled a "megoldás forrása"-inál. Most inkább nézzük meg ennek a c++-os verzióját. Amint láthatjuk, lényegében ugyanaz, csupán a kiíratáshoz és a randomizáláshoz szükséges részek térnek el, meg abban, hogy a <function>main</function> az osztályon kívül van, mivel ez c++, és nem java.
        </para>
        <programlisting language="c"><![CDATA[#include <ctime>
        #include <cmath>
        #include <iostream>

        class PolarGenerator{

          bool nincsTarolt = true;
          double tarolt;

          public :
          double kovetkezo()
          {

        	   if(nincsTarolt)
        	    {

                double u1,u2,v1,v2,w;
                do{

        	       u1= ((double) rand() / (double)(RAND_MAX));
        	       u2= ((double) rand() / (double)(RAND_MAX));
        	       v1=(2*u1)-1;
        	       v2=(2*u2)-1;

        	       w=(v1*v1)+(v2*v2);
                }while(w>1);

                   double r = sqrt((-2*log(w))/w);
        	         tarolt = r * v2;
        	         nincsTarolt =! nincsTarolt;
        	         return r * v1;

        	     }
        	     elsepublic static void main(String[] args) {

            PolárGenerátor g = new PolárGenerátor();

            for(int i=0; i<10; ++i)
                System.out.println(g.következő());

        }
        	     {
        	        nincsTarolt =! nincsTarolt;
        	        return tarolt;
        	     }
          };
        };

        int main()
        {
          std::srand(std::time(0));

          PolarGenerator g;

          for(int i=0; i<10; ++i)
        	   std::cout<<g.kovetkezo()<<std::endl;

          return 0;
        }
]]>
        </programlisting>
    </section>

    <section>
        <title>Homokózó</title>
        <para>
          Írjuk át az első védési programot (LZW binfa) C++ nyelvről Java nyelvre, ugyanúgy működjön!
Mutassunk rá, hogy gyakorlatilag a pointereket és referenciákat kell kiirtani és minden máris működik
(erre utal a feladat neve, hogy Java-ban minden referencia, nincs választás, hogy mondjuk egy
attribútum pointer, referencia vagy tagként tartalmazott legyen).
Miután már áttettük Java nyelvre, tegyük be egy Java Servletbe és a böngészőből GET-es kéréssel
(például a böngésző címsorából) kapja meg azt a mintát, amelynek kiszámolja az LZW binfáját!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="arroway/BinfaServlet.java">
            <filename>bhax/thematic_tutorials/bhax_textbook/arroway/BinfaServlet.java</filename>
            </link>
        </para>
        <para>
          <link xlink:href="arroway/Lzw.java">
          <filename>bhax/thematic_tutorials/bhax_textbook/arroway/Lzw.java</filename>
          </link>
        </para>
        <para>
          A java nyelvnek van egy olyan tulajdonsága, miszerint minden referencia és így nem kell azon gondolkodnunk, hogy most pointert vagy referenciát használjunk. Ennek köszönhetően a c++-os verzióból nyugodtan eltávolíthatjuk a pointereket jelző "*"-ot és a program ugyanúgy fog működni.
        </para>
        <programlisting language="c"><![CDATA[
...
private Csomopont balNulla = null;
private Csomopont jobbEgy = null;
...
private Csomopont fa = null;
...
protected Csomopont gyoker = new Csomopont('/');
...]]>
        </programlisting>
        <para>
          A fejfájás elkerülése érdekében a következő lépés lehet a ";"-k eltávolítása az osztályok és metódusaik végéről. Ezután a kiíratásokhoz, valamint a fájlkezeléshez szükséges metódus / típus cserék elvégeztével kész is a javás verzió (lásd: Lzw.java a megoldás forrásánál)
        </para>
        <para>
          A Servletbe való beépítéshez szükségünk lesz egy szerver létrehozására a saját gépünkön. Ezt a Tomcat tette lehetővé számomra. A telepítéshez segítséget talász <link xlink:href="https://linuxize.com/post/how-to-install-tomcat-9-on-ubuntu-18-04/">itt</link>.
        </para>
        <para>
          Mivel a programung jelenleg fájlból olvassa be az adatokat és a végeredményt is egy fájlba menti, a kód ezen részét elhagyjuk és csupán a <function>LZWBinFa</function> osztályt hagyjuk meg, amelyet egy Servletbe fogunk beilleszteni.
        </para>
        <programlisting language="c"><![CDATA[
        import javax.servlet.*;
        import javax.servlet.http.*;
        import java.io.*;
        import java.util.*;

        public class BinfaServlet extends HttpServlet {

          public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

            String fa = request.getParameter("fa");


        	  LZWBinFa binFa = new LZWBinFa();

        	  boolean kommentben = false;
        	  byte[] bFa = fa.getBytes();
            for (int i = 0; i < bFa.length; i++) {

                	if (bFa[i] == 0x3e) {
                  		kommentben = true;
                  		continue;
                	}

                	if (bFa[i] == 0x0a) {
                 		kommentben = false;
                  		continue;
                	}

                	if (kommentben) {
                  		continue;
                	}

                	if (bFa[i] == 0x4e) {
                  		continue;
                	}

                	for (int j = 0; j < 8; ++j) {

                  		if ((bFa[i] & 0x80) != 0) {
                    			binFa.egyBitFeldolg('1');
                  		} else {
                    			binFa.egyBitFeldolg('0');
                  		}
                  		bFa[i] <<= 1;

                	}

            }


          	PrintWriter out = response.getWriter();
          	out.println("<HTML>");
          	out.println("<HEAD>");
          	out.println("<TITLE>Servlet Testing</TITLE>");
          	out.println("</HEAD>");
          	out.println("<BODY>");
          	out.println("<p>");
          	out.println("fa = " + fa);
         	  out.println("</p>");
          	out.println("<pre>");
          	binFa.kiir(out);
          	out.println("depth = " + binFa.getMelyseg());
          	out.println("mean = " + binFa.getAtlag());
          	out.println("var = " + binFa.getSzoras());
          	out.println("</pre>");
          	out.println("</BODY>");
          	out.println("</HTML>");
          }
        }]]></programlisting>

    </section>

    <section>
        <title>„Gagyi”</title>
        <para>
          Az ismert formális „while (x &lt;= t &amp;&amp; x &gt;= t &amp;&amp; t != x);” tesztkérdéstípusra adj a szokásosnál
(miszerint x, t az egyik esetben az objektum által hordozott érték, a másikban meg az objektum
referenciája) „mélyebb” választ, írj Java példaprogramot mely egyszer végtelen ciklus, más x, t
értékekkel meg nem! A példát építsd a JDK Integer.java forrására , hogy a 128-nál inkluzív objektum
példányokat poolozza!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="arroway/Gagyi.java">
            <filename>bhax/thematic_tutorials/bhax_textbook/arroway/Gagyi.java</filename>
            </link>
        </para>
        <para>
          A feltétel összegezve valahogy így hangzik: <function>x</function> egyenlő <function>t</function> és <function>x</function> nem egyenlő <function>t</function>. Első ránézésre azt hinnénk, hogy a ciklus semmilyen esetben sem fog lefutni. Viszont ez nem igaz, mivel a változóknak sem az értéke sem a típusa sincs megadva. Ebben az esetben ha <function>x</function> és <function>t</function> objektumok, akkor az értékük megegyezhet az első kettő feltételnél, de a harmadiknál eltér, mivel azok külön objektumok, külön vannak eltárolva, tehát eltér a referenciájuk. Ekkor viszont ha az értékük ugyanaz, a ciklus végtelen ciklus lesz.
        </para>
        <programlisting language="c"><![CDATA[
    /**
     * Cache to support the object identity semantics of autoboxing for values between
     * -128 and 127 (inclusive) as required by JLS.
     *
     * The cache is initialized on first usage.  The size of the cache
     * may be controlled by the {@code -XX:AutoBoxCacheMax=<size>} option.
     * During VM initialization, java.lang.Integer.IntegerCache.high property
     * may be set and saved in the private system properties in the
     * jdk.internal.misc.VM class.
     */

    private static class IntegerCache {
        static final int low = -128;
        static final int high;
        static final Integer cache[];

        static {
            // high value may be configured by property
            int h = 127;
            String integerCacheHighPropValue =
                VM.getSavedProperty("java.lang.Integer.IntegerCache.high");
            if (integerCacheHighPropValue != null) {
                try {
                    int i = parseInt(integerCacheHighPropValue);
                    i = Math.max(i, 127);
                    // Maximum array size is Integer.MAX_VALUE
                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
                } catch( NumberFormatException nfe) {
                    // If the property cannot be parsed into an int, ignore it.
                }
            }
            high = h;

            cache = new Integer[(high - low) + 1];
            int j = low;
            for(int k = 0; k < cache.length; k++)
                cache[k] = new Integer(j++);

            // range [-128, 127] must be interned (JLS7 5.1.7)
            assert IntegerCache.high >= 127;
        }

        private IntegerCache() {}
    }

    /**
     * Returns an {@code Integer} instance representing the specified
     * {@code int} value.  If a new {@code Integer} instance is not
     * required, this method should generally be used in preference to
     * the constructor {@link #Integer(int)}, as this method is likely
     * to yield significantly better space and time performance by
     * caching frequently requested values.
     *
     * This method will always cache values in the range -128 to 127,
     * inclusive, and may cache other values outside of this range.
     *
     * @param  i an {@code int} value.
     * @return an {@code Integer} instance representing {@code i}.
     * @since  1.5
     */
    @HotSpotIntrinsicCandidate
    public static Integer valueOf(int i) {
        if (i >= IntegerCache.low && i <= IntegerCache.high)
            return IntegerCache.cache[i + (-IntegerCache.low)];
        return new Integer(i);
    }]]>
        </programlisting>
        <para>
          Ha megnézzük a JDK-ban az Integer.java forráskódot, akkor az eddigi logikánk nem helyes, ugyanis az <function>Integer</function> objektum létrehozásakor a -128 és 127 közötti értékek egy már előre létrehozott, cache-elt referenciát kapnak. Tehát ha létrehozunk 2 <function>Integer</function> típusú objektumot ugyanazzal az értékkel, akkor -128 és 127 közötti érték esetén a harmadik feltétel hamis lesz, mivel ugyanarra a cahce-elt értékre mutatnak, egyébként viszont a ciklus végtelen ciklus lesz.
        </para>
        <programlisting language="c"><![CDATA[
        public static void main(String[] args){

          Integer x = 128; // 127
          Integer t = 128; // 127

          while (x <= t && x >= t && t != x){
            System.out.print("végtelen ciklus");
          }

          System.out.println("vége...");

        }]]>
        </programlisting>


    </section>

    <section>
        <title>Yoda</title>
        <para>
          Írjunk olyan Java programot, ami java.lang.NullPointerEx-el leáll, ha nem követjük a Yoda
conditions-t! https://en.wikipedia.org/wiki/Yoda_conditions
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="arroway/Yoda.java">
            <filename>bhax/thematic_tutorials/bhax_textbook/arroway/Yoda.java</filename>
            </link>
        </para>
        <para>
          A Yoda condition egy programozási stílus, aminek az elnevezését Yoda nem hagyományos szórendje ihletett. Ez a programozásban úgy nyilvánul meg, hogy a feltételek írásakor a konstans értéket írjuk a feltétel bal oldalára.
        </para>
        <programlisting language="c"><![CDATA[
          // with Yoda condition (const, variable)
          if(36 = x){} // syntax error

          //without Yoda condition (variable, const)
          if(x = 36){} // logical error]]>
        </programlisting>
        <para>
         Ennek az az előnye, hogy ezt szokássá alakítva elkerülhetünk néhány logikai hibát, mint pl. ha 2 egyenlőségjel helyett csak 1-et írunk, akkor a fordító nem jelez hibát, viszont a program nem úgy fog működni, ahogy azt mi szeretnénk. Ugyanez igaz akkor is, ha <function>String</function>-eket hasonlítunk össze nem Yoda módszerrel és a változónk <function>null</function> értékű, de mi csak annyiról értesülünk, hogy a két szöveg nem egyezik meg.
        </para>
        <programlisting language="c"><![CDATA[
          public class Yoda{

            public static void main(String[] args){

              String yc = null;

              // with Yoda condition
              /*
              if( "true".equals(yc) ){
                System.out.println("Yoda's power!");
              }*/

              // without Yoda condition
              if( yc.equals("true") ){}

            }

          }]]>
        </programlisting>
        <para>
          Ha ezt lefordítjuk és futtatjuk, akkor a programunk természetesen <function>java.lang.NullPointerException</function>-el leáll.
        </para>
        <programlisting language="c"><![CDATA[$ java Yoda
Exception in thread "main" java.lang.NullPointerException
	at Yoda.main(Yoda.java:14)]]>
        </programlisting>


    </section>

    <section>
        <title>Kódolás from scratch</title>
        <para>
          Induljunk ki ebből a tudományos közleményből: http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/bbp-
alg.pdf és csak ezt tanulmányozva írjuk meg Java nyelven a BBP algoritmus megvalósítását!
Ha megakadsz, de csak végső esetben: https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-
javat/apbs02.html#pi_jegyei (mert ha csak lemásolod, akkor pont az a fejlesztői élmény marad ki,
melyet szeretném, ha átélnél).
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="arroway/BinfaServlet.java">
            <filename>bhax/thematic_tutorials/bhax_textbook/arroway/BinfaServlet.java</filename>
            </link>
        </para>
        <para>
          <link xlink:href="arroway/Lzw.java">
          <filename>bhax/thematic_tutorials/bhax_textbook/arroway/Lzw.java</filename>
          </link>
        </para>
        <para>

        </para>


    </section>


</chapter>
