<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Calvin!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>MNIST</title>
        <para>
          Az alap feladat megoldása, +saját kézzel rajzolt képet is ismerjen fel,
https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol Háttérként ezt vetítsük le:
<link xlink:href="https://prezi.com/0u8ncvvoabcr/no-programming-programming/">https://prezi.com/0u8ncvvoabcr/no-programming-programming/</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="calvin/mnist.py">
            <filename>bhax/thematic_tutorials/bhax_textbook/calvin/mnist.py</filename>
            </link>
        </para>
        <para>
          A feladat megoldásához szükséges a Tensorflow telepítése (<link xlink:href="https://www.tensorflow.org/install">https://www.tensorflow.org/install</link>) és jobb esetben egy grafikus kártyára az Nvidia-tól. Én a TensorFlow 2.0 GPU-s verzióját használtam.
        </para>
        <para>
          Először beolvassuk szépen az adatokat. Az <function>x_train</function> változó kapja a tanításhoz szükséges képeket, amelyek egy <function>numpy</function> tömbben vannak eltárolva 28 * 28-as felbontásban. Az <function>y_train</function> szintén egy tömb, ahol számon tartjuk, hogy milyen szám van a képeken. Innen tudja majd a program, hogy mi van a képen. Az <function>x_test</function> és <function>y_test</function> a teszteléshez szükséges képeket és címkéket tárolja.
        </para>
        <programlisting><![CDATA[
          import tensorflow as tf

          mnist = tf.keras.datasets.mnist

          (x_train, y_train), (x_test, y_test) = mnist.load_data()
          x_train, x_test = x_train / 255.0, x_test / 255.0
          ]]>
        </programlisting>
        <para>
          Ezután konfiguráljuk a modellt: ilyenkor fontos megadni a bemenet dimenzióit és az egyes rétegeket. Valamint kiválasztjuk a megfelelő <function>optimizer</function> és <function>loss</function> metódusokat.
        </para>
        <programlisting><![CDATA[
          model = tf.keras.models.Sequential([
            tf.keras.layers.Flatten(input_shape=(28, 28)),
            tf.keras.layers.Dense(128, activation='relu'),
            tf.keras.layers.Dropout(0.2),
            tf.keras.layers.Dense(10, activation='softmax')
          ])

          model.compile(optimizer='adam',
                        loss='sparse_categorical_crossentropy',
                        metrics=['accuracy'])
          ]]>
        </programlisting>
        <para>
          A <function>fit()</function> eljárással indítjuk meg a tanítást. Az <function>epochs</function> argumentum határozza meg, hogy hánszor menjen végig az összes adaton. Az <function>evaluate()</function> metódussal leteszteljük azalgoritmust a félretett 10000 tesztalannyal. A <function>verbose</function> argumentummal az eredmény kiíratásának módját állíthatjuk.
        </para>
        <programlisting><![CDATA[
          model.fit(x_train, y_train, epochs=5)
          model.evaluate(x_test,  y_test, verbose=2)
          ]]>
        </programlisting>
        <para>
          Most következik a saját kép felismerése. Az <function>imread()</function> fogja nekünk beolvasni a képet egy <function>numpy</function> tömb formájában. A beolvasott kép RGB értékei 0 és 1 között vannak, így nincs szükség elosztani őket 255-el.
        </para>
        <programlisting><![CDATA[
          from matplotlib.image import imread
          import numpy as np

          img = imread('eght.png')
          ]]>
        </programlisting>
        <para>
          Mivel a kép fekete-fehér, ezért mind az R, G és B érték ugyanaz, így elég csak az egyiket elmenteni, mert az algoritmus 28 * 28-as formátumot igényel (és nem 28*28*4(RGBA)).
        </para>
        <programlisting><![CDATA[
          img_gray = 1 - img[:, :, 0]
          ]]>
        </programlisting>
        <para>
          A <function>predict</function> függvénynek <function>numpy array</function>-ba helyezett képek kellenek, ezért mi beletesszük a miénket és megkérjük a modelt hogy tippelje meg hogy mit írhattunk a képekre (nekünk csak 1 van most) és mentse el a <function>predicts</function> változóba tömbként (pl. [szerintem8, talán7, biztos3]).
        </para>
        <programlisting><![CDATA[
          testimg = np.array([img_gray])
          predicts = model.predict(testimg)
          ]]>
        </programlisting>
        <para>
          Megnézzük hogy az első (nulladik) képre mit tippelt. Ehhez szükség van az <function>argmax</function> függvényre, mert a model 10 értéket ad vissza egy kép tippelésekor (pl. szerinte ez 10%-ra 1-es, 20%-ra 2-es...), de nekünk csak a legnagyobb kell, amiben a legbiztosabb.
        </para>
        <programlisting><![CDATA[
          print("sajat kep: ")
          print( np.argmax(predicts[0]) )
          ]]>
        </programlisting>
        <mediaobject>
            <imageobject>
                <imagedata fileref="images/mnist.png" scale="65"/>
            </imageobject>
        </mediaobject>



    </section>

    <section>
        <title>Deep MNIST</title>
        <para>
          Mint az előző, de a mély változattal. Segítő ábra, vesd össze a forráskóddal a
https://arato.inf.unideb.hu/batfai.norbert/NEMESPOR/DE/denbatfai2.pdf 8. fóliáját!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="calvin/deep.py">
            <filename>bhax/thematic_tutorials/bhax_textbook/calvin/deep_mnist.py</filename>filename>
            </link>
        </para>
        <para>
          
        </para>
        <programlisting><![CDATA[
          from __future__ import absolute_import, division, print_function, unicode_literals

          # Install TensorFlow

          import tensorflow as tf
          import matplotlib.pyplot as plt
          from matplotlib.image import imread
          import numpy as np

          mnist = tf.keras.datasets.mnist

          (x_train, y_train), (x_test, y_test) = mnist.load_data()

          x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
          x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
          input_shape = (28, 28, 1)
          # Making sure that the values are float so that we can get decimal points after division
          x_train = x_train.astype('float32')
          x_test = x_test.astype('float32')

          x_train, x_test = x_train / 255.0, x_test / 255.0

          model = tf.keras.models.Sequential([
            tf.keras.layers.Conv2D(32, kernel_size=(5, 5), padding="same", activation='relu', input_shape=input_shape),
            tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="same"),
            tf.keras.layers.Conv2D(64, kernel_size=(5, 5), padding="same", activation='relu'),
            tf.keras.layers.MaxPooling2D(pool_size=(2, 2), strides=(2, 2), padding="same"),
            tf.keras.layers.Flatten(),
            tf.keras.layers.Dense(1024, activation='relu'),
            tf.keras.layers.Dropout(0.2),
            tf.keras.layers.Dense(10, activation='softmax')
          ])

          model.compile(optimizer='adam',
                        loss='sparse_categorical_crossentropy',
                        metrics=['accuracy'])

          model.fit(x_train, y_train, epochs=3)

          model.evaluate(x_test,  y_test, verbose=2)

          model.summary()

          plt.imshow(x_test[4444].reshape(28, 28),cmap='Greys')
          pred = model.predict(x_test[4444].reshape(1, 28, 28, 1))
          print(pred.argmax())
          plt.show()

          # sajat kepekkel: 4 = 4, 1 = 1, 2 = 2 perfect

          img = imread('eght.png') # csak png-t hasznalj, az RGB értékek 0 és 1 között vannak, így nincs szükség elosztani őket 255-el
          img_gray = 1 - img[:, :, 0]
          testimg = np.array([img_gray]) # a predict függvénynek numpy array-ba helyezett képek kellenek, ezért mi beletesszük a miénket
          predicts = model.predict(testimg[0].reshape(1, 28, 28, 1)) # megkérjük a model hogy tippelje meg h mit irhattunk a kepekre (nekünk csak 1 van most) és mentse el a predicts valtozozba tömbként (pl. [szerintem8, talán7, biztos nem3])
          print("sajat kep: ")
          print( np.argmax(predicts[0]) )

          ]]>
        </programlisting>



    </section>

    <section>
        <title>Android telefonra a TF objektum detektálója</title>
        <para>
          Telepítsük fel, próbáljuk ki!
        </para>
        <para>
          Az applikáció letölthető akár egyenesen a Play áruházból, mivel többen is jónak látták feltölteni oda. Ahogy megnyitjuk az applikációt, egyből indulhatunk is felfedezni a környezetünket egy algoritmus szemszögéből.
        </para>
        <para>
          A program képes egyszerre több objektumot is észrevenni, amelyeket körbekeretez és még a pontosságot is kiírja mellé.
        </para>
        <para>
          Hamar rájövünk, hogy azért vannak hiányosságai, ugyanis gyakran megesik, hogy éppen rossz szemszögből állítjuk rá a kamerát egy objektumra és egy fehér tálból hirtelen illemhelység lesz.
        </para>
        <para>
          Ennek ellenére egész jól működik az egyszerű objektumokon (mint pl.: asztal, szék), de lássuk be hogy azért van még mit tanulnia.
        </para>

        <mediaobject>
            <imageobject>
                <imagedata fileref="images/tensor_od.png" scale="65"/>
            </imageobject>
        </mediaobject>


    </section>

    <section>
        <title>SMNIST for Machines</title>
        <para>
          Készíts saját modellt, vagy használj meglévőt, lásd: https://arxiv.org/abs/1906.12213
        </para>


    </section>

    <section>
        <title>Minecraft MALMO-s példa</title>
        <para>
          A https://github.com/Microsoft/malmo felhasználásával egy ágens példa, lásd pl.:
https://youtu.be/bAPSu3Rndi8, https://bhaxor.blog.hu/2018/11/29/eddig_csaltunk_de_innentol_mi,
https://bhaxor.blog.hu/2018/10/28/minecraft_steve_szemuvege
        </para>


    </section>


</chapter>
