<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Olvasónapló!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
<section>
    <title>Juhász István féle könyv</title>
    <para>Egy számítógép programozására három nyelvi szintet különböztetünk meg:</para>
    <para>-Gépi kód</para>
    <para>-assembly szint</para>
    <para>-Magas szint</para>
    <para>
        Mink a magas szintű programozási nyelvekkel foglalkozunk. A magas szintű nyelven megírt forrásszöveg helyesírását szintaktikának, jelentését szemantikának nevezzük. Egy magas szintű programozási nyelvet ez a kettő határoz meg. A processzor csak a gépi kódot érti, ezért a gépi kód előállításához vagy fordítót vagy interpretert kell használnunk. A fordítóprogram a lexikális elemzés, szintaktikai elemzés, szemantikai elemzés és kódgenerálás lépések végrehajtásával állítja elő a forrásszövegből a tárgyprogramot. Az interpreteres módszer is elvégzi az első 3 lépést, viszont tárgyprogramot nem készít, ehelyett soronként értelmezi és végrehajtja az utasításokat. A programnyelv szabványát hivatkozási nyelvnek hivjuk, ahol a szintaktikai és szemantikai szabályok vannak részletezve. A programok írásához leggyakrabban integrált fejlesztői környezetet (IDE - Integrated Development Enviroment) használunk, amelyek nagyban megkönnyítik a nagyobb projektek kezelését. Ezek tartalmazzák a szövegszerkesztőt, fordítót / interpretert és futtató rendszert. Az imperatív nyelvek algoritmusokból állnak. Ezek lehetnek eljárásorientált vagy objektumorientált nyelvek. És vannak a deklaratív nyelvek. Ezek nem algoritmikusak és a programozó csak a problémát adja meg, a nyelvi implementációba van beépítve a megoldás módja.
    </para>

    <para>
        Az adattípusok absztrakt programozási eszközök, amelyek névvel (azonosítóval) rendelkeznek. Az adattípusokhoz hozzátartoznak a rajta végrehajtható műveletek. Valamely programozási nyelvekben mi válsztunk típust az azonosítóhoz, míg a többiben a fordítóprogram/interpreter. Egyes nyelvek megengedik számunkra, hogy saját típust definiáljunk, ezek leggyakrabban egyszerűbb típusokból állnak. Ezek az alapvető típusok a következők: valós (float, double, long double)  ill. egész szám  (int, short[int], long[int]) , karakteres (char),  logikai típus és a mutató. Ha nevesített konstanst hozunk létre, akkor megadjuk a típusát és értékét az elején és utána már nem módosítható, csak a nevével hivatkozunk rá. Ezeken kívül ottvannak az összetett adattípusok, minit például a tömb vagy a rekord (Pascal).
        * a zárójelben levő típusnevek a C nyelvből vannak.
    </para>
    <para>
        Az utasításoknak 2 nagy csoportja van: deklarációs és végrehajtható. A deklarációs utasítások a fordítóprogramnak szólnak. Ezek az utasítások nem fordulnak, de befolyásolják a tárgykódot. A tárgykód a végrehajtható utasításokból (pl.: értékadó utasítás, üres u., ugró u., elágaztató u., ciklusszervező u., hívó u., vezérlésátadó u., i/o és egyéb utasítások) generálódik. 
    </para>
</section>

<section>
    <title>K &amp; R, A C programozási nyelv</title>
    <para>
        A változók és az állandók a programok alapvető részei. A deklarálásuk során megadjuk a nevüket, típusukat és esetleg a kezdeti értéküket. A nevekre nézve vannak némi megkötések, pl.: nem tartalmazhat pontot, nem lehetnek kulcsszavak (mint if, else, int), stb.
    </para>
    <para>
        A c-ben csak néhány alapvető adattípus van:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                int - egész szám
            </para>
        </listitem>
        <listitem>
            <para>
                float - egyszeres pontosságú lebegőpontos szám
            </para>
        </listitem>
        <listitem>
            <para>
                double - kétszeres pontosságú lebegőpontos szám
            </para>
        </listitem>
    </itemizedlist>
    <para>
        Ezt kiegészíthetjük a <function>short</function>, <function>long</function> és <function>unsigned</function> minősítő szimbólumokkal. A <function>short</function> és a <function>long</function> a méretét szabályozza.  Az <function>unsigned</function>(előjel nélküli) számokra a modulo 2n aritmetika szabályai vonatkoznak, ahol n az int típust ábrázolóbit-ek száma; az unsigned számok mindig pozitívak. 
    </para>
    <programlisting><![CDATA[   short int x;
    long int y;
    unsigned int z;]]>
    </programlisting>
    <mediaobject>
        <imageobject>
            <imagedata fileref="images/adattipusok.png" scale="65"/>
        </imageobject>
    </mediaobject>
    <para>
        Vezérlési adatszerkezetek:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                Utasítások és blokkok: a pontosvessző lezárja az utasításokat, a kapcsos zárójelek pedig összefognak több utasítást mintha eggyek lennének (pl. függvények).
            </para>
        </listitem>
        <listitem>
            <para>
                Elágaztató utasítás: az <function>if</function> és <function>else</function> utasításokkal eldönthetjük hogy a megadott kifejezés logikai értékétől függően mely utasítások hajtódjanak végre. Többirányú elágaztatás a <function>switch</function> utasítással érhető el, ahol az elágazás már nem logikai érték alapján történik. 
            </para>
        </listitem>
        <listitem>
            <para>
                Ciklusszervező utasítások: lehetővé teszik valamennyi utasítás többszöri megismétlését. Előre meghatározott ismétlésszám esetén <function>for</function> ciklust, egyébként pedig while ciklust ajánlott használni. Az utóbbinál válszthatunk hogy az utasítások végrehajtása előtt vagy után akarjuk kiértékelni az iteráció folytatását meghatározó feltételt.
            </para>
        </listitem>
    </itemizedlist>

</section>

<section>
    <title>BME: Szoftverfejlesztés C++ nyelven / Benedek Zoltán, Levendovszky Tihamér</title>
    <para></para>

</section>

</chapter>