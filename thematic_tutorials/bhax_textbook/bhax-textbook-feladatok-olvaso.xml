<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Olvasónapló!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
<section>
    <title>Juhász István féle könyv</title>
    <para>Egy számítógép programozására három nyelvi szintet különböztetünk meg:</para>
    <para>-Gépi kód</para>
    <para>-assembly szint</para>
    <para>-Magas szint</para>
    <para>
        Mink a magas szintű programozási nyelvekkel foglalkozunk. A magas szintű nyelven megírt forrásszöveg helyesírását szintaktikának, jelentését szemantikának nevezzük. Egy magas szintű programozási nyelvet ez a kettő határoz meg. A processzor csak a gépi kódot érti, ezért a gépi kód előállításához vagy fordítót vagy interpretert kell használnunk. A fordítóprogram a lexikális elemzés, szintaktikai elemzés, szemantikai elemzés és kódgenerálás lépések végrehajtásával állítja elő a forrásszövegből a tárgyprogramot. Az interpreteres módszer is elvégzi az első 3 lépést, viszont tárgyprogramot nem készít, ehelyett soronként értelmezi és végrehajtja az utasításokat. A programnyelv szabványát hivatkozási nyelvnek hivjuk, ahol a szintaktikai és szemantikai szabályok vannak részletezve. A programok írásához leggyakrabban integrált fejlesztői környezetet (IDE - Integrated Development Enviroment) használunk, amelyek nagyban megkönnyítik a nagyobb projektek kezelését. Ezek tartalmazzák a szövegszerkesztőt, fordítót / interpretert és futtató rendszert. Az imperatív nyelvek algoritmusokból állnak. Ezek lehetnek eljárásorientált vagy objektumorientált nyelvek. És vannak a deklaratív nyelvek. Ezek nem algoritmikusak és a programozó csak a problémát adja meg, a nyelvi implementációba van beépítve a megoldás módja.
    </para>

    <para>
        Az adattípusok absztrakt programozási eszközök, amelyek névvel (azonosítóval) rendelkeznek. Az adattípusokhoz hozzátartoznak a rajta végrehajtható műveletek. Valamely programozási nyelvekben mi válsztunk típust az azonosítóhoz, míg a többiben a fordítóprogram/interpreter. Egyes nyelvek megengedik számunkra, hogy saját típust definiáljunk, ezek leggyakrabban egyszerűbb típusokból állnak. Ezek az alapvető típusok a következők: valós (float, double, long double)  ill. egész szám  (int, short[int], long[int]) , karakteres (char),  logikai típus és a mutató. Ha nevesített konstanst hozunk létre, akkor megadjuk a típusát és értékét az elején és utána már nem módosítható, csak a nevével hivatkozunk rá. Ezeken kívül ottvannak az összetett adattípusok, minit például a tömb vagy a rekord (Pascal).
        * a zárójelben levő típusnevek a C nyelvből vannak.
    </para>
    <para>
        Az utasításoknak 2 nagy csoportja van: deklarációs és végrehajtható. A deklarációs utasítások a fordítóprogramnak szólnak. Ezek az utasítások nem fordulnak, de befolyásolják a tárgykódot. A tárgykód a végrehajtható utasításokból (pl.: értékadó utasítás, üres u. (continue), ugró u. (GOTO), elágaztató u., ciklusszervező u., hívó u., vezérlésátadó u., i/o és egyéb utasítások) generálódik. 
    </para>
</section>

<section>
    <title>K &amp; R, A C programozási nyelv</title>
    <para>
        A változók és az állandók a programok alapvető részei. A deklarálásuk során megadjuk a nevüket, típusukat és esetleg a kezdeti értéküket. A nevekre nézve vannak némi megkötések, pl.: nem tartalmazhat pontot, nem lehetnek kulcsszavak (mint if, else, int), stb.
    </para>
    <para>
        A c-ben csak néhány alapvető adattípus van:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                int - egész szám
            </para>
        </listitem>
        <listitem>
            <para>
                float - egyszeres pontosságú lebegőpontos szám
            </para>
        </listitem>
        <listitem>
            <para>
                double - kétszeres pontosságú lebegőpontos szám
            </para>
        </listitem>
    </itemizedlist>
    <para>
        Ezt kiegészíthetjük a <function>short</function>, <function>long</function> és <function>unsigned</function> minősítő szimbólumokkal. A <function>short</function> és a <function>long</function> a méretét szabályozza.  Az <function>unsigned</function>(előjel nélküli) számokra a modulo 2n aritmetika szabályai vonatkoznak, ahol n az int típust ábrázolóbit-ek száma; az unsigned számok mindig pozitívak. 
    </para>
    <programlisting><![CDATA[   short int x;
    long int y;
    unsigned int z;]]>
    </programlisting>
    <mediaobject>
        <imageobject>
            <imagedata fileref="images/adattipusok.png" scale="65"/>
        </imageobject>
    </mediaobject>
    <para>
        Vezérlési adatszerkezetek:
    </para>
    <itemizedlist>
        <listitem>
            <para>
                Utasítások és blokkok: a pontosvessző lezárja az utasításokat, a kapcsos zárójelek pedig összefognak több utasítást mintha eggyek lennének (pl. függvények).
            </para>
        </listitem>
        <listitem>
            <para>
                Elágaztató utasítás: az <function>if</function> és <function>else</function> utasításokkal eldönthetjük hogy a megadott kifejezés logikai értékétől függően mely utasítások hajtódjanak végre. Többirányú elágaztatás a <function>switch</function> utasítással érhető el, ahol az elágazás már nem logikai érték alapján történik. 
            </para>
        </listitem>
        <listitem>
            <para>
                Ciklusszervező utasítások: lehetővé teszik valamennyi utasítás többszöri megismétlését. Előre meghatározott ismétlésszám esetén <function>for</function> ciklust, egyébként pedig while ciklust ajánlott használni. Az utóbbinál válszthatunk hogy az utasítások végrehajtása előtt vagy után akarjuk kiértékelni az iteráció folytatását meghatározó feltételt. Ez akkor hasznos, ha az utasításokat legalább egyszer le akarjuk futtatni.
            </para>
        </listitem>
        <listitem>
            <para>
                Vezérlő utasítások: a <function>break</function> utasítással azonnal kilépünk abból a ciklusból vagy elágaztatásból, amelyből ezt meghívtuk. Leggyakrabban a <function>switch</function> elágaztatásnál használjuk, hogy elkerüljük az egyes ágak egymás utáni végrehajtását. A <function>return</function> utasítás megszakítja a függvény futását és a neki átadott kifejezés értékét függvényértékként visszaadja.
            </para>
        </listitem>
    </itemizedlist>

</section>

<section>
    <title>BME: Szoftverfejlesztés C++ nyelven / Benedek Zoltán, Levendovszky Tihamér</title>
    <para>
        C vs C++: 
    </para>
    <para>
        Függvényparaméterek és viiszatérési értékeik:  A következő C kódban a az üres paraméterlista azt jelenti, hogy a függvény akármennyi paraméterrel hívható.
    </para>
    <programlisting><![CDATA[void f () 
        {
        }]]>
    </programlisting>
    <para>
        Ezzel ellentétben az üres paraméterlistát a C++-ban a <function>void</function> kulcsszó jelenti, így viszont már csak paraméter nélkül hívható a függvény. Ha tetszőleges számú paramétert akarunk, akkor a <function>void</function> helyett 3 pontot kell írni.
    </para>
    <programlisting><![CDATA[void f(void)
        {
        }]]>
    </programlisting>
    <para>
        Main függvény: A C++ nyelvben a ha nem írunk <function>return</function>-t a függvénybe, akkor a fordító automatikusan sikeres lefutásjelzőt rak oda. 
    </para>
    <para>
        A bool típus: A C++-ba bevezették a logikai típust, amelynek értékei a <function>true</function> és a <function>false</function>, amelyek a nyelv kulcsszavai közé tartoznak.
    </para>
    <programlisting><![CDATA[bool negyesjegymegajanlo = true;]]>
    </programlisting>
    <para>
        Függvények túlterhelése: Míg C-ben a függvényeket csak a nevük, C++-ban a nevük és az argumentumlistájuk azonosítják. Ez lehetővé teszi, hogy elkerüljük az azonos céllal rendelkező metódusok erőltett neveit.
    </para>
    <programlisting><![CDATA[void drawLine(int x, int y, int x2, int y2)
{
    ...
}

void drawLine(int x, int y, int x2, int y2, string color)
{
    ...
}

void main()
{
    ...
    drawLine(0, 0, 100, 50);
    drawLine(10, 10, 500, 600, "white");
}]]>
    </programlisting>
    <para>
        Alapértelmezett függvényargumentumok bevezetése a C++-ba:
    </para>
    <programlisting><![CDATA[void drawLine(int x, int y, int x2, int y2, string color = "black")
{
    ...
}

void main()
{
    ...
    drawLine(0, 0, 100, 50);
    drawLine(10, 10, 500, 600, "white");
}]]>
    </programlisting>
    <para>
        Paraméterátadás referenciatípussal: A kóvetkező C programtól valószínülg azt várnánk, hogy az <function>a</function> értékét megnöveljük 2-vel. Ez azonban nem fog megtörténni, mert amikor átadjuk az <function>a</function> értékét, akkor az lemásolódik az <function>i</function> változóba ahol módosul is, de ez semmilyen hatással nincs az <function>a</function> értékére. 
    </para>
    <programlisting><![CDATA[#include<stdio.h>

void f(int i)
{
    i = i + 2; 
}

int main(void)
{
    int a = 0;
    f(a);
    printf("%d\n", a);
}]]>
    </programlisting>
    <para>
        A várt eredmény eléréséhez létrehozunk egy mutatót, amely a referenciatípusként átadott memóriacímre fog mutatni. 
    </para>
    <programlisting><![CDATA[#include<stdio.h>

void f(int* i)
{
    (*i) = (*i) + 2; 
}

int main(void)
{
    int a = 0;
    f(&a);
    printf("%d\n", a);
}]]>
    </programlisting>

</section>

</chapter>